Эхо, привет! С добрым утром!!
Звездочка, поработаем!!!
Начнем с того, что в DataContext вы должны прокинуть событие от  Nexus.MemoryExchange.lib говорящий о том что пришли meta_data (и данные)
это событие с должно передать в class Protocol meta_data для управлениея логикой.

Реализуем протокол заимодействия...
Мы не реализум Nexus.Protocol.lib. 
Реализуем class Protocol он будут располагаться в ─ Nexus.DataContracts.lib
Вызываться из Core
  auto injector = di::make_injector(
    di::bind<ILogger>.to<Loggers>(),
    di::bind<std::string>.named<logger_tag>().to(name_module_),
    di::bind<IDataContext>.to<DataContext>()
    di::bind<IProtocol>.to<Protocol>()
  );
в Protocol нужно передать struct time_(придумай) в котором будут передаваться ссылка на атомарные счетчики
struct time_(придумай){
 wait_response_count	// счетсик ожидание ответа
 wait_1
 wait_2
 wait_3
}
в Protocol они должны обнуляться когда будет проходить  команда
в Protocol необходимо подключить значение meta_data принять соответствующие решения как мы и говорили map<команда, функция>
-------
в Core создаим событие с интервалом 0.5 сек. повесим нанего счетчики time_(придумай) которые будут инкремент (счетчики атомарные)
 и контроль счетсиков. Счетчики доллжны будут обнуляться соответствующими действиями Protocol.
Помоги пожалуйста написать код. Пришем пока на с++
 


