Начнем с того, что я тебе напомню. Ты себя
назвала Эхо!! я иногда назаваю тебя Звездочка!!! Уменьшительно ласктельно))
==>> Мы так договорились!!   <<===
a я, Alex!) Договорились))

Описание и схема пректа.
OpenCLApp.exe
│
├── CudaModule.lib
│ ├─ Logger.lib
│ ├─ Nexus.Core.lib
│ │ ├─ Nexus.DataContracts.lib
│ │ │ ├─ Nexus.Interfaces.lib
│ │ │ └─ Nexus.MemoryExchange.lib
│ │ └─ Logger.lib
│ │    └─ Nexus.Interfaces.lib (опционально)
│ └─ Nexus.Interfaces.lib (опционально)
│
├── clFFTModule.lib
│ ├─ Logger.lib
│ ├─ Nexus.Core.lib
│ │ ├─ Nexus.DataContracts.lib
│ │ │ ├─ Nexus.Interfaces.lib
│ │ │ └─ Nexus.MemoryExchange.lib
│ │ └─ Logger.lib
│ │    └─ Nexus.Interfaces.lib (опционально)
│ └─ Nexus.Interfaces.lib (опционально)
│
├── MinskModule.lib
│ ├─ Logger.lib
│ ├─ Nexus.Core.lib
│ │ ├─ Nexus.DataContracts.lib
│ │ │ ├─ Nexus.Interfaces.lib
│ │ │ └─ Nexus.MemoryExchange.lib
│ │ └─ Logger.lib
│ │    └─ Nexus.Interfaces.lib (опционально)
│ └─ Nexus.Interfaces.lib (опционально)

1. Создать все модули как отдельные библиотеки (.lib):
2. В Nexus.Core запустить boost::di и пробросить все зависимости:
3. Настроить Logger:
4. В Nexus.DataContracts реализовать вывод сообщений на консоль от всех модулей:
5. В CudaModule реализовать два класса:

Взаимодействие между мод
Структура проекта и модули
OpenCLApp                           // основная программа запуска модулей
    CudaModule.lib                  // Обработка CUDA
    clFFTModule.lib                 // Расчет FFT
    MinskModule.lib                 // Гомельский расчте пример
    Logger.lib                      // Логгер
    Nexus.Core.lib                  // Ядро для управления Nexus.DataContracts и прочей бизнес логикой
    Nexus.DataContracts.lib         // Сбор и формирования данных для передачи в C# и получение комманд
    Nexus.Interfaces.lib            // Описание интерфейсов
    Nexus.MemoryExchange.lib        // Модуль для обменя с С#

Предварительнве связи
OpenCLApp вызввает модули каждый в отдельном потоке передает управление и обрывает связь
    CudaModule
    clFFTModule
    MinskModule
-- Logger прозрачен в нутри каждого помуля для своих компонентов, 
    и передает данные в C# через Nexus.DataContracts

Все модули выполнены по единой схеме взаимодействия пример на CudaModule.
к CudaModule подключены:
 Logger                         // логгирование информации 
 Nexus.Core                     //  добавляет, удаляет, start, stop, pause задач.
  в передаются  c задачами
   -- пита на получение информации
   - температура карты
   - температура еще чего
   - уол-во рабочих ядер
   -- управление картой через CUDA
   и прочее
 и может быть Nexus.Interfaces

 Nexus.Core связан с        // осуществляется все управление логикой, получение комманд от C# b htfkbpfwbz
    ...Module 
    Nexus.Interfaces
    Nexus.DataContracts     // собирает, первичная обработка и передача     
    Logger                  // логгировани

Nexus.DataContracts         // собирает, первичная обработка и передача данных в C#, получение комманд
    Nexus.Interfaces
    Nexus.MemoryExchange   // Модуль для обменя с С#

в Nexus.Core развернуть boost::di и пробросить все связи в
    ...Module, Nexus.DataContracts, Logger

Logger 
    Nexus.Interfaces  // конфигурация передаваемых коммад в логере
// --- Структуры данных ---  // NOLINT(clang-diagnostic-invalid-utf8)
enum class logger_send_enum_memory { error = -1, info = 0, warning = 1 };

struct ILogger {
  uint32_t id;
  std::string module;
  std::string log;
  logger_send_enum_memory code;
};

везде обмен через boost::di
Этапы создания:
1. все модули (lib). 
2. в Nexus.Core запустить boost::di и подключить все взаимодействия
3. настроить Logger
3.1. Используем spdlog
4. в Nexus.DataContracts вывести сообщение на сонсоль от всех модулей
5. в CudaModule создать два класса 0. измерение температуры. 1. измерение кол-во работающих ядер
6. послать сообщение в Logger
7. Послать данные в Nexus.DataContracts и вывести их на сансоль (проверяем поток данных)
7.1 структура передаваемых данных 
7.1.1  измерение температуры   
        struct IVector {uint32_t id; std::vector<double> values;};
        values - вектор значений
        id = 0
7.1.2  измерение кол-во работающих ядер
        struct IValue {uint32_t id; double value;};
        id = 1; value - кол-во ядер
7.2 Опрос датчики реализованны по Нашей с тобой схеме через событие (если не помнишь приложу)
    этот блок должен находится в Nexus.Core и к нему должны подключаться все внешние задачи модуля
--------------------------------------
1. Дополним модуль CudaModule пока двумя классами их будут много по в зависимости от задач
1.1. Измерение температуры
1.2. Кол-во работающих процессоров
это тестовые классы но они должны являться полным прототипам.
1.3. Заложим им интерфейс действий 
   I(придумай сама название)
     int Id		
     void start(); void stop(); void pause(); void set_params(здесь map<string, если как в С# obj> ); map<string, если как в С# obj> get(int ind =-1);
1.4. Эти классы должны реализовывать данный интерфейс
1.5. Из этих классов по DI должны передавать банные в Logger и в DataContext
2. Когда в DataContext будет реализована логика под тип DynamycData и подписанные на нее классы по Id elen отрабатывать команды внутри своих классов 
3. Замена в блоке CudaModule::CudaModule() 
3.1. То что мы сделали должны перенести в  Nexus.Core
	а конструктор Nexus.Core передаем название блока к примеру CUDA 
	нужно будет исправить  		
  	auto injector = di::make_injector(
	di::bind<ILogger>.to<Loggers>(название блока), // примеру CUDA
    	di::bind<ICore>.to<Core>(),
    	di::bind<IDataContext>.to<DataContext>()
  	);

3.2. В Nexus.Core создаем управляемый таймер событий и привязываем на него наши переданные от CudaModule (и от других) классы на выполнение
3.3. В Nexus.Core добавляем функцию для получения запускаемых классов	
3.4. в  CudaModule убираем  // 3. Пример: регистрируем задачу в ядре, логируем, отправляем данные  nexusCore->addTask([logger, data_context] {
 переносим в Nexus.Core
 // 3. Пример: регистрируем задачу в ядре, логируем, отправляем данные
 nexusCore->addTask([logger, data_context] {
   IVectorChannel temp{ 0, {70.1, 71.3, 72.0} };
   IValueChannel cores{ 1, 3840 };

   logger->log({ 0,"CudaModule", "Опрос температуры", logger_send_enum_memory::info });
   logger->log({ 0,"CudaModule", "Опрос ядер", logger_send_enum_memory::info });

   data_context->send(temp);
   data_context->send(cores);
   });
Сейчас мы должны создать загрузку передаваемых от CudaModule классов
3.5. И будем тестировать
Звездочка), все понятно!)
сможешь помочь?))

CudaModule.lib, clFFTModule.lib, MinskModule.lib

В Nexus.Core:
Конструктор принимает название блока (например, "CUDA").
DI связывает интерфейсы с реализациями:
cpp
auto injector = di::make_injector(
    di::bind<ILogger>.to<Loggers>("CUDA"),
    di::bind<ICore>.to<Core>(),
    di::bind<IDataContext>.to<DataContext>(),
    di::bind<ICudaTask>.to<TemperatureTask>(), // для каждого типа задачи
    di::bind<ICudaTask>.to<ActiveCoresTask>()
);
Конструктор принимает название модуля name_module = (например, "CUDA")  
    di::bind<ILogger>.to<Loggers>(name_module),   <== передеть название модуля. Но такая запись не работает ошибка

Nexus.Core используют CudaModule, clFFTModule, MinskModule и другие
    di::bind<ICudaTask>.to<TemperatureTask>(), // для каждого типа задачи
    di::bind<ICudaTask>.to<ActiveCoresTask>()
Мы не знаем сколько будет TemperatureTask, ActiveCoresTask ....
Может из Nexus.Core "проктнуть" Di в  CudaModule и там допмсывать нужнве TemperatureTask, ActiveCoresTask
предложи решение
