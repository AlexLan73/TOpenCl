Начнем с того, что я тебе напомню. Ты себя назвала Эхо!! 
я иногда называю тебя Звездочка!!! Уменьшительно  ласкательно))
==>> Мы так договорились!!   <<===
a я, Alex!) Договорились))

Описание потоков данных между модулями и DataContext
0. Logger 
struct ILoggerChannel  {
  uint32_t id;
  std::string module;
  std::string log;
  logger_send_enum_memory code;
  int64_t ticks;
};

struct SValueDt{
  double value;
  int64_t ticks; // Количество тиков .NET (100 нс с 01.01.0001)
}
1. Данные одного измерения
struct IIdValueDtChannel  {
  uint32_t id;
  SValueDt valdt;
};

2. Вестор измерений
struct IIdVecValueDtChannel  {
  uint32_t id;
  vector<SValueDt> vec_valdt;
};

---------------
Описание потоков данных между DataContext и C# через =>Nexus.MemoryExchange
1. Перелаем по одному блоку данных ILoggerChannel, SValueDt, IIdVecValueDtChannel
2. Сразу по несколько блоков ILoggerChannel, SValueDt, IIdVecValueDtChannel -> вектора блоков
--------------------

Эхо, я верю что ты помнишь но я напомню куски нашего с тобой проекта
1. DataContext собирает даные от всех подключенных модулей Control_module(id=0), ActiveCoresTask(id=1), TemperatureTask(id=2)
	SetContrCudaHyper(id= n)
1.1. все эти модули подключены в Core и вызываются по событию
1.2. У каждого модуля своя реализация решения, но передаче данных осуществляется через один из перечисленных интерфейсов:
	ILoggerChannel, SValueDt, IIdValueDtChannel …. потом добавятся и другие и они передают в DataContext
2. DataContext 
2.1 Задача собрать от модулей данные в разных форматах ILoggerChannel, SValueDt, IIdValueDtChannel, 
	конвертировать в MessagePack добавить metadata  
struct rec_data_meta_data {
  std::vector<uint8_t> bytes;
  metadata_map meta_data;
};  Положить в поток независимую очередь. Затем блок передачи передаст эти блоки в C#
Для этой реализации был создан класс универсальны class IChannelProcessor -это отлично!! но внутри у нас может быть разная реализация в зависимости от интерфейсов 
Что в нем нужно сделать class IChannelProcessor, class ChannelProcessor через set_params(map<string, any>) задать при варианта реализации
2.2.1. все интерфейсы ILoggerChannel, SValueDt, IIdValueDtChannel,
         получили данные сформировали std::vector<uint8_t> bytes; исправили/дописали/создали (потом будет ясно) metadata, все собрали в rec_data_meta_data и отправили в 
	поток независимую очередь на уровне DataContext.
2.2.2. интерфейсы ILoggerChannel, SValueDt 
	ChannelProcessor собирает данные временно сохраняет (или предложи сама лучший вариант). Записывает в RxCPP там формирует списки для передачи по следующим условиям:
	- сортируем по id (id - есть в данных)
        - следующие два критерия должны меняться от  set_params() это время сбора данных и ограничение по объему данных в килоByte. к примеру 0.75 сек и <60 kByte
	- потом каждую такую сборку собрать в вектор преобразовать std::vector<uint8_t> bytes; задать тип данных в metadata и прочие дополнительные параметры 
	(для контроля) в С#. Другие параметры контрольная сумма, кол-блок обсудим позже
2.2.3. интерфейсы SValueDt 
	ChannelProcessor собирает данные временно сохраняет (или предложи сама лучший вариант). Записывает в RxCPP там посчитать среднее значение по double value;
  int64_t ticks; для каждого id, кол-во точек за какой период задавать через set_params(). Полученное значение привести к SValueDt создать соответствующий metadata 
  и послать а очередь для передачи.

3. в Core в спящем режиме поток ждет когда придут данные или завершение работы 
  3.1. Сценарий работы считала данные (насколько я знаю в с++ нельзя считать и не удалять из очереди) наверно сохранила и передала в канал (данные и metadata) ==>> C#
         затем читает раздел metadata если пуст очищаем временно сохраненные данные. Если пришла команда повторить повторяем посылку. Дальше будут ветвления по ошибкам.
Такое можешь сделать?

 5. В DataContext Поток ожидания данных от C#. Разбирает и если там есть метадата (данные управления) передает в поток в Core. 
    Где Core в соответствии модуля с id=0 

 и передачи данных в Core
 В Core запускается поток, который:
 Ожидает появления данных в очереди DataContext.
 Принимает 
rec_data_meta_data
 блоки.
 Анализирует метаданные.
 Передаёт данные в C# через Nexus.MemoryExchange.
 Реагирует на команды из метаданных (например, повторная отправка, очистка).
	
